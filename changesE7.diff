diff --git a/include/scheduler.h b/include/scheduler.h
index e69de29..5645f7d 100644
--- a/include/scheduler.h
+++ b/include/scheduler.h
@@ -0,0 +1,45 @@
+#ifndef __scheduler_h
+#define __scheduler_h
+
+#include <utility/list.h>
+
+__BEGIN_SYS
+
+class Priority : public List_Element_Rank {
+public:
+	Priority(int p = NORMAL) : List_Element_Rank(p){}
+
+	 enum {
+		MAIN   = 0,
+		HIGH   = 1,
+		NORMAL = (unsigned(1) << (sizeof(int) * 8 - 1)) - 4,
+		LOW    = (unsigned(1) << (sizeof(int) * 8 - 1)) - 3,
+		IDLE   = (unsigned(1) << (sizeof(int) * 8 - 1)) - 2
+	};
+
+	static const bool preemptive = true;
+};
+
+class RoundRobin: public List_Element_Rank
+{
+public:
+	enum {
+		MAIN   = 0,
+		NORMAL = (unsigned(1) << (sizeof(int) * 8 - 1)) - 4,
+		IDLE   = (unsigned(1) << (sizeof(int) * 8 - 1)) - 2
+	};
+
+	static const bool preemptive = true;
+
+public:
+	RoundRobin(int p = NORMAL): List_Element_Rank(p) {}
+};
+
+template<typename T>
+class Scheduler : public Scheduling_List<T> {};
+
+__END_SYS
+
+
+
+#endif
diff --git a/include/system/traits.h b/include/system/traits.h
index 36f69e0..16ae61e 100644
--- a/include/system/traits.h
+++ b/include/system/traits.h
@@ -119,7 +119,6 @@ template<> struct Traits<Thread>: public Traits<void>
 {
     static const bool smp = Traits<System>::multicore;
 
-    static const bool preemptive = true;
     static const unsigned int QUANTUM = 10000; // us
 
     static const bool trace_idle = hysterically_debugged;
diff --git a/include/thread.h b/include/thread.h
index d959c47..45561b5 100644
--- a/include/thread.h
+++ b/include/thread.h
@@ -7,6 +7,7 @@
 #include <utility/handler.h>
 #include <cpu.h>
 #include <machine.h>
+#include <scheduler.h>
 
 extern "C" { void __exit(); }
 
@@ -20,8 +21,13 @@ class Thread
     friend class Alarm;
     friend class IA32;
 
+public:
+    // Thread Queue
+    typedef RoundRobin Criterion;
+    typedef Ordered_Queue<Thread, Criterion, Scheduler<Thread>::Element> Queue;
+
 protected:
-    static const bool preemptive = Traits<Thread>::preemptive;
+    static const bool preemptive = Criterion::preemptive;
     static const bool reboot = Traits<System>::reboot;
 
     static const unsigned int QUANTUM = Traits<Thread>::QUANTUM;
@@ -40,29 +46,16 @@ public:
         FINISHING
     };
 
-    // Thread Priority
-    typedef unsigned int Priority;
-    enum {
-        MAIN   = 0,
-        HIGH   = 1,
-        NORMAL = (unsigned(1) << (sizeof(int) * 8 - 1)) - 4,
-        LOW    = (unsigned(1) << (sizeof(int) * 8 - 1)) - 3,
-        IDLE   = (unsigned(1) << (sizeof(int) * 8 - 1)) - 2
-    };
-
     // Thread Configuration
     struct Configuration {
-        Configuration(const State & s = READY, const Priority & p = NORMAL, unsigned int ss = STACK_SIZE)
+        Configuration(const State & s = READY, const Criterion & p = Criterion::NORMAL, unsigned int ss = STACK_SIZE)
         : state(s), priority(p), stack_size(ss) {}
 
         State state;
-        Priority priority;
+        Criterion priority;
         unsigned int stack_size;
     };
 
-    // Thread Queue
-    typedef Ordered_Queue<Thread, Priority> Queue;
-
 public:
     template<typename ... Tn>
     Thread(int (* entry)(Tn ...), Tn ... an);
@@ -72,8 +65,8 @@ public:
 
     const volatile State & state() const { return _state; }
 
-    const volatile Priority & priority() const { return _link.rank(); }
-    void priority(const Priority & p);
+    const volatile Criterion & priority() const { return _link.rank(); }
+    void priority(const Criterion & p);
 
     int join();
     void pass();
@@ -88,7 +81,7 @@ protected:
     void constructor_prolog(unsigned int stack_size);
     void constructor_epilog(const Log_Addr & entry, unsigned int stack_size);
 
-    static Thread * volatile running() { return _running; }
+    static Thread * volatile running() { return scheduler.chosen()->object(); }
 
     static void lock() { CPU::int_disable(); }
     static void unlock() { CPU::int_enable(); }
@@ -114,21 +107,20 @@ protected:
     volatile State _state;
     Queue * _waiting;
     Thread * volatile _joining;
-    Queue::Element _link;
+    Scheduler<Thread>::Element _link;
 
     static volatile unsigned int _thread_count;
     static Scheduler_Timer * _timer;
 
 private:
-    static Thread * volatile _running;
-    static Queue _ready;
-    static Queue _suspended;
+    static Scheduler<Thread> scheduler;
+
 };
 
 
 template<typename ... Tn>
 inline Thread::Thread(int (* entry)(Tn ...), Tn ... an)
-: _state(READY), _waiting(0), _joining(0), _link(this, NORMAL)
+: _state(READY), _waiting(0), _joining(0), _link(this, Criterion::NORMAL)
 {
     constructor_prolog(STACK_SIZE);
     _context = CPU::init_stack(_stack + STACK_SIZE, &__exit, entry, an ...);
diff --git a/src/abstraction/thread.cc b/src/abstraction/thread.cc
index f092723..2ee09e1 100644
--- a/src/abstraction/thread.cc
+++ b/src/abstraction/thread.cc
@@ -15,10 +15,7 @@ __BEGIN_SYS
 volatile unsigned int Thread::_thread_count;
 Scheduler_Timer * Thread::_timer;
 
-Thread* volatile Thread::_running;
-Thread::Queue Thread::_ready;
-Thread::Queue Thread::_suspended;
-
+Scheduler<Thread> Thread::scheduler;
 // Methods
 void Thread::constructor_prolog(unsigned int stack_size)
 {
@@ -40,15 +37,11 @@ void Thread::constructor_epilog(const Log_Addr & entry, unsigned int stack_size)
                     << "},context={b=" << _context
                     << "," << *_context << "}) => " << this << endl;
 
-    switch(_state) {
-        case RUNNING: break;
-        case READY: _ready.insert(&_link); break;
-        case SUSPENDED: _suspended.insert(&_link); break;
-        case WAITING: break;
-        case FINISHING: break;
+    if(_state == State::READY || _state == State::RUNNING){
+    	scheduler.insert(&_link);
     }
 
-    if(preemptive && (_state == READY) && (_link.rank() != IDLE))
+    if(preemptive && (_state == READY) && (_link.rank() != Criterion::IDLE))
         reschedule();
     else
         unlock();
@@ -74,11 +67,10 @@ Thread::~Thread()
         exit(-1);
         break;
     case READY:
-        _ready.remove(this);
+        scheduler.remove(&_link);
         _thread_count--;
         break;
     case SUSPENDED:
-        _suspended.remove(this);
         _thread_count--;
         break;
     case WAITING:
@@ -126,13 +118,11 @@ void Thread::pass()
 
     db<Thread>(TRC) << "Thread::pass(this=" << this << ")" << endl;
 
-    Thread * prev = _running;
+    Thread * prev = running();
     prev->_state = READY;
-    _ready.insert(&prev->_link);
 
-    _ready.remove(this);
+    scheduler.choose(&_link);
     _state = RUNNING;
-    _running = this;
 
     dispatch(prev, this);
 
@@ -146,18 +136,13 @@ void Thread::suspend()
 
     db<Thread>(TRC) << "Thread::suspend(this=" << this << ")" << endl;
 
-    if(_running != this)
-        _ready.remove(this);
-
+    scheduler.remove(&_link);
     _state = SUSPENDED;
-    _suspended.insert(&_link);
 
-    if(_running == this) {
-        _running = _ready.remove()->object();
-        _running->_state = RUNNING;
+    Thread* next = running();
+    next->_state = RUNNING;
 
-        dispatch(this, _running);
-    }
+    dispatch(this, next);
 
     unlock();
 }
@@ -169,11 +154,11 @@ void Thread::resume()
 
     db<Thread>(TRC) << "Thread::resume(this=" << this << ")" << endl;
 
-   _suspended.remove(this);
    _state = READY;
-   _ready.insert(&_link);
+   scheduler.insert(&_link);
 
    unlock();
+
 }
 
 
@@ -182,16 +167,14 @@ void Thread::yield()
 {
     lock();
 
-    db<Thread>(TRC) << "Thread::yield(running=" << _running << ")" << endl;
+    db<Thread>(TRC) << "Thread::yield(running=" << running() << ")" << endl;
 
-    Thread * prev = _running;
+    Thread * prev = running();
     prev->_state = READY;
-    _ready.insert(&prev->_link);
-
-    _running = _ready.remove()->object();
-    _running->_state = RUNNING;
+    Thread* next = scheduler.choose_another()->object();
+    next->_state = RUNNING;
 
-    dispatch(prev, _running);
+    dispatch(prev, next);
 
     unlock();
 }
@@ -203,7 +186,8 @@ void Thread::exit(int status)
 
     db<Thread>(TRC) << "Thread::exit(status=" << status << ") [running=" << running() << "]" << endl;
 
-    Thread * prev = _running;
+    Thread * prev = running();
+    scheduler.remove(&prev->_link);
     prev->_state = FINISHING;
     *reinterpret_cast<int *>(prev->_stack) = status;
 
@@ -216,10 +200,9 @@ void Thread::exit(int status)
 
     lock();
 
-    _running = _ready.remove()->object();
-    _running->_state = RUNNING;
-
-    dispatch(prev, _running);
+    Thread* next = running();
+    next->_state = RUNNING;
+    dispatch(prev, next);
 
     unlock();
 }
@@ -232,14 +215,16 @@ void Thread::sleep(Queue * q)
     assert(locked());
 
     Thread * prev = running();
+    scheduler.remove(&prev->_link);
+
     prev->_state = WAITING;
     prev->_waiting = q;
     q->insert(&prev->_link);
 
-    _running = _ready.remove()->object();
-    _running->_state = RUNNING;
+    Thread* next = running();
+    next->_state = RUNNING;
 
-    dispatch(prev, _running);
+    dispatch(prev, next);
 
     unlock();
 }
@@ -256,13 +241,13 @@ void Thread::wakeup(Queue * q)
         Thread * t = q->remove()->object();
         t->_state = READY;
         t->_waiting = 0;
-        _ready.insert(&t->_link);
+        scheduler.insert(&t->_link);
+
+        if(preemptive)
+		   reschedule();
     }
 
     unlock();
-
-    if(preemptive)
-        reschedule();
 }
 
 
@@ -277,7 +262,7 @@ void Thread::wakeup_all(Queue * q)
         Thread * t = q->remove()->object();
         t->_state = READY;
         t->_waiting = 0;
-        _ready.insert(&t->_link);
+        scheduler.insert(&t->_link);
     }
 
     unlock();
@@ -289,7 +274,14 @@ void Thread::wakeup_all(Queue * q)
 
 void Thread::reschedule()
 {
-    yield();
+	lock();
+
+    Thread * prev = running();
+    Thread * next = scheduler.choose()->object();
+
+    dispatch(prev, next);
+
+    unlock();
 }
 
 
diff --git a/src/init/init_first.cc b/src/init/init_first.cc
index 9621909..b432b2c 100644
--- a/src/init/init_first.cc
+++ b/src/init/init_first.cc
@@ -28,10 +28,10 @@ public:
         // If EPOS is not a kernel, then adjust the application entry point to __epos_app_entry,
         // which will directly call main(). In this case, _init will have already been called,
         // before Init_Application, to construct main()'s global objects.
-        Thread::_running = new (SYSTEM) Thread(Thread::Configuration(Thread::RUNNING, Thread::MAIN), reinterpret_cast<int (*)()>(__epos_app_entry));
+        new (SYSTEM) Thread(Thread::Configuration(Thread::RUNNING, Thread::Criterion::MAIN), reinterpret_cast<int (*)()>(__epos_app_entry));
 
         // Idle thread creation must succeed main, thus avoiding implicit rescheduling
-        new (SYSTEM) Thread(Thread::Configuration(Thread::READY, Thread::IDLE), &Thread::idle);
+        new (SYSTEM) Thread(Thread::Configuration(Thread::READY, Thread::Criterion::IDLE), &Thread::idle);
 
         db<Init>(INF) << "done!" << endl;
 
