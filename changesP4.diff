diff --git a/include/machine/pc/ic.h b/include/machine/pc/ic.h
index fc423bc..1bdb5f0 100644
--- a/include/machine/pc/ic.h
+++ b/include/machine/pc/ic.h
@@ -47,7 +47,7 @@ public:
     enum {
         IRQ_TIMER	= 0,
         IRQ_KEYBOARD	= 1,
-        IRQ_CASCADE	= 2,
+        IRQ_CASCADE	    = 2,
         IRQ_SERIAL24    = 3,
         IRQ_SERIAL13    = 4,
         IRQ_PARALLEL23  = 5,
@@ -67,6 +67,7 @@ public:
         INT_FIRST_HARD  = HARD_INT,
         INT_TIMER	= HARD_INT + IRQ_TIMER,
         INT_KEYBOARD	= HARD_INT + IRQ_KEYBOARD,
+		INT_SUSPEND     = HARD_INT + IRQ_LAST - 5,
         INT_LAST_HARD   = HARD_INT + IRQ_LAST,
         INT_RESCHEDULER = SOFT_INT,
         INT_SYSCALL
@@ -162,6 +163,7 @@ public:
     enum {
         INT_FIRST_HARD  = i8259A::INT_FIRST_HARD,
         INT_TIMER	= i8259A::INT_TIMER,
+		INT_SUSPEND = i8259A::INT_SUSPEND,
         INT_RESCHEDULER = i8259A::INT_RESCHEDULER, // in multicores, reschedule goes via IPI, which must be acknowledged just like hardware
         INT_SYSCALL     = i8259A::INT_SYSCALL,
         INT_LAST_HARD   = INT_RESCHEDULER
@@ -453,6 +455,7 @@ public:
     using IC_Common::Interrupt_Id;
     using IC_Common::Interrupt_Handler;
     using Engine::INT_TIMER;
+    using Engine::INT_SUSPEND;
     using Engine::INT_RESCHEDULER;
     using Engine::INT_SYSCALL;
 
diff --git a/include/scheduler.h b/include/scheduler.h
index c15acfb..4a88dc1 100644
--- a/include/scheduler.h
+++ b/include/scheduler.h
@@ -79,12 +79,36 @@ namespace Scheduling_Criteria
     public:
         FCFS(int p = NORMAL); // Defined at Alarm
     };
+
+    template<typename T>
+    class CpuAffinity: public Priority
+	{
+	public:
+		enum {
+			MAIN   = 0,
+			NORMAL = 1,
+			IDLE   = (unsigned(1) << (sizeof(int) * 8 - 1)) - 1
+		};
+
+		static const bool timed = true;
+		static const bool dynamic = false;
+		static const bool preemptive = true;
+		static const unsigned int QUEUES = Traits<Machine>::CPUS;
+		unsigned int _queue;
+
+	public:
+		CpuAffinity(int p = NORMAL): Priority(p), _queue(T::schedule_queue(p)) {}
+
+		static unsigned int current_queue() { return Machine::cpu_id(); }
+
+		const unsigned int queue() const { return _queue; }
+	};
 }
 
 
 // Scheduling_Queue
 template<typename T, typename R = typename T::Criterion>
-class Scheduling_Queue: public Multihead_Scheduling_List<T> {};
+class Scheduling_Queue: public Scheduling_Multilist<T> {};
 
 // Scheduler
 // Objects subject to scheduling by Scheduler must declare a type "Criterion"
diff --git a/include/system/traits.h b/include/system/traits.h
index 1e7eedd..d432829 100644
--- a/include/system/traits.h
+++ b/include/system/traits.h
@@ -28,7 +28,7 @@ template<> struct Traits<Build>
     enum {Legacy};
     static const unsigned int MODEL = Legacy;
 
-    static const unsigned int CPUS = 8;
+    static const unsigned int CPUS = 4;
     static const unsigned int NODES = 1; // > 1 => NETWORKING
 };
 
@@ -39,7 +39,7 @@ template<> struct Traits<Debug>
     static const bool error   = true;
     static const bool warning = true;
     static const bool info    = false;
-    static const bool trace   = true;
+    static const bool trace   = false;
 };
 
 template<> struct Traits<Lists>: public Traits<void>
@@ -119,7 +119,7 @@ template<> struct Traits<Thread>: public Traits<void>
 {
     static const bool smp = Traits<System>::multicore;
 
-    typedef Scheduling_Criteria::RR Criterion;
+    typedef Scheduling_Criteria::CpuAffinity<Thread> Criterion;
     static const unsigned int QUANTUM = 10000; // us
 
     static const bool trace_idle = hysterically_debugged;
diff --git a/include/system/types.h b/include/system/types.h
index 5a07d67..2e4076e 100644
--- a/include/system/types.h
+++ b/include/system/types.h
@@ -90,6 +90,7 @@ namespace Scheduling_Criteria
     class Priority;
     class FCFS;
     class RR;
+    template<typename> class CpuAffinity;
 };
 
 class Address_Space;
diff --git a/include/thread.h b/include/thread.h
index 37e5426..29e5ab7 100644
--- a/include/thread.h
+++ b/include/thread.h
@@ -9,6 +9,7 @@
 #include <machine.h>
 #include <system.h>
 #include <scheduler.h>
+#include <ic.h>
 
 extern "C" { void __exit(); }
 
@@ -24,6 +25,7 @@ class Thread
     friend class IA32;
 
 protected:
+    static const bool smp = Traits<Thread>::smp;
     static const bool preemptive = Traits<Thread>::Criterion::preemptive;
     static const bool reboot = Traits<System>::reboot;
 
@@ -68,6 +70,7 @@ public:
 
     // Thread Queue
     typedef Ordered_Queue<Thread, Criterion, Scheduler<Thread>::Element> Queue;
+    typedef Simple_List<Thread> List;
 
 public:
     template<typename ... Tn>
@@ -90,6 +93,18 @@ public:
     static void yield();
     static void exit(int status = 0);
 
+    unsigned int queue() { return link()->rank().queue(); }
+
+    static unsigned int schedule_queue(int priority) {
+		unsigned int queue;
+		if(priority == IDLE || priority == MAIN)
+			queue = Machine::cpu_id();
+		else
+			queue = _scheduler.queue_min_size();
+
+		return queue;
+    }
+
 protected:
     void constructor_prolog(unsigned int stack_size);
     void constructor_epilog(const Log_Addr & entry, unsigned int stack_size);
@@ -100,8 +115,20 @@ protected:
 
     Criterion & criterion() { return const_cast<Criterion &>(_link.rank()); }
 
-    static void lock() { CPU::int_disable(); spin.acquire(); }
-    static void unlock() { spin.release(); CPU::int_enable(); }
+    static void lock(bool disable_int = true) {
+        if(disable_int)
+            CPU::int_disable();
+        if(smp)
+            _lock.acquire();
+    }
+
+    static void unlock(bool enable_int = true) {
+        if(smp)
+            _lock.release();
+        if(enable_int)
+            CPU::int_enable();
+    }
+    
     static bool locked() { return CPU::int_disabled(); }
 
     void suspend(bool locked);
@@ -119,6 +146,9 @@ protected:
 
 private:
     static void init();
+    static void reschedule_handler(const IC::Interrupt_Id &);
+    static void suspend_handler(const IC::Interrupt_Id &);
+    static void cutucao(Thread *);
 
 protected:
     char * _stack;
@@ -131,7 +161,8 @@ protected:
     static volatile unsigned int _thread_count;
     static Scheduler_Timer * _timer;
     static Scheduler<Thread> _scheduler;
-    static Spin spin;
+    static Spin _lock;
+    static List toSuspend [];
 };
 
 
diff --git a/include/utility/heap.h b/include/utility/heap.h
index 6a5a691..b6f8152 100644
--- a/include/utility/heap.h
+++ b/include/utility/heap.h
@@ -92,15 +92,18 @@ public:
 private:
     void out_of_memory();
     Spin spin;
+    bool _heap_int_enabled;
 
     void acquire(){
-    	spin.acquire();
+    	_heap_int_enabled = CPU::int_enabled();
     	CPU::int_disable();
+    	spin.acquire();
     }
 
     void release(){
     	spin.release();
-    	CPU::int_enable();
+    	if(_heap_int_enabled)
+    		CPU::int_enable();
     }
 };
 
diff --git a/include/utility/list.h b/include/utility/list.h
index 966b140..aadcdda 100644
--- a/include/utility/list.h
+++ b/include/utility/list.h
@@ -1205,6 +1205,20 @@ public:
     bool empty() const { return _list[R::current_queue()].empty(); }
 
     unsigned int size() const { return _list[R::current_queue()].size(); }
+
+    unsigned int queue_min_size() const {
+		unsigned int min = -1;
+		unsigned int queue = -1;
+
+		for(unsigned int i = 0; i < Q; i++)
+			if(min > _list[i].size()){
+				min = _list[i].size();
+				queue = i;
+			}
+
+		return queue;
+    }
+
     unsigned int total_size() const {
         unsigned int s = 0;
         for(unsigned int i = 0; i < Q; i++)
diff --git a/src/abstraction/thread.cc b/src/abstraction/thread.cc
index 2e636c5..6e35378 100644
--- a/src/abstraction/thread.cc
+++ b/src/abstraction/thread.cc
@@ -16,7 +16,8 @@ __BEGIN_SYS
 volatile unsigned int Thread::_thread_count;
 Scheduler_Timer * Thread::_timer;
 Scheduler<Thread> Thread::_scheduler;
-Spin Thread::spin;
+Spin Thread::_lock;
+Thread::List Thread::toSuspend[Thread::Criterion::QUEUES];
 
 // Methods
 void Thread::constructor_prolog(unsigned int stack_size)
@@ -44,9 +45,12 @@ void Thread::constructor_epilog(const Log_Addr & entry, unsigned int stack_size)
         _scheduler.suspend(this);
 
     if(preemptive && (_state == READY) && (_link.rank() != IDLE))
-        reschedule();
+        cutucao(this);
     else
-        unlock();
+        if((_state == RUNNING) || (_link.rank() == IDLE)) // Keep interrupts disabled during init_first()
+            unlock(false);
+        else
+            unlock();
 }
 
 
@@ -110,7 +114,7 @@ void Thread::priority(const Priority & c)
     }
 
     if(preemptive) {
-        reschedule();
+        cutucao(this);
     }
 }
 
@@ -144,17 +148,20 @@ void Thread::pass()
     db<Thread>(TRC) << "Thread::pass(this=" << this << ")" << endl;
 
     Thread * prev = running();
-    Thread * next = _scheduler.choose(this);
-
-    if(next)
-        dispatch(prev, next, false);
-    else {
-        db<Thread>(WRN) << "Thread::pass => thread (" << this << ") not ready!" << endl;
-        unlock();
+    if(prev->queue() == this->queue()){
+		Thread * next = _scheduler.choose(this);
+
+		if(next)
+			dispatch(prev, next, false);
+		else {
+			db<Thread>(WRN) << "Thread::pass => thread (" << this << ") not ready!" << endl;
+			unlock();
+		}
+    } else {
+    	unlock();
     }
 }
 
-
 void Thread::suspend(bool locked)
 {
     if(!locked)
@@ -163,13 +170,29 @@ void Thread::suspend(bool locked)
     db<Thread>(TRC) << "Thread::suspend(this=" << this << ")" << endl;
 
     Thread * prev = running();
+    if(prev->queue() == this->queue()){
+		//fudeu se this Ã© de cpu diferente de running.
+		_scheduler.suspend(this);
+		_state = SUSPENDED;
 
-    _scheduler.suspend(this);
-    _state = SUSPENDED;
+		Thread * next = running();
 
-    Thread * next = running();
+		dispatch(prev, next);
+    } else {
+    	toSuspend[this->queue()].insert(new (SYSTEM) List::Element(this));
+    	IC::ipi_send(this->queue(), IC::INT_SUSPEND);
+    	unlock();
+    }
+}
 
-    dispatch(prev, next);
+void Thread::suspend_handler(const IC::Interrupt_Id & i)
+{
+	lock();
+
+	List::Element* e = toSuspend[Machine::cpu_id()].remove_head();
+	Thread* suspend = e->object();
+	delete e;
+	suspend->suspend(true);
 }
 
 
@@ -184,7 +207,7 @@ void Thread::resume()
         _scheduler.resume(this);
 
         if(preemptive)
-            reschedule();
+            cutucao(this);
     } else {
         db<Thread>(WRN) << "Resume called for unsuspended object!" << endl;
 
@@ -261,7 +284,7 @@ void Thread::wakeup(Queue * q)
         _scheduler.resume(t);
 
         if(preemptive)
-            reschedule();
+            cutucao(t);
     } else
         unlock();
 }
@@ -282,7 +305,7 @@ void Thread::wakeup_all(Queue * q)
             _scheduler.resume(t);
 
             if(preemptive) {
-                reschedule();
+                cutucao(t);
                 lock();
             }
          }
@@ -299,12 +322,7 @@ void Thread::reschedule()
     assert(locked());
 
     Thread * prev = running();
-    Thread * next;
-	if(prev->priority() == IDLE){
-		next = _scheduler.choose_another();
-	}else{
-		next = _scheduler.choose();
-	}
+    Thread * next = _scheduler.choose();
 
     dispatch(prev, next);
 }
@@ -317,6 +335,19 @@ void Thread::time_slicer(const IC::Interrupt_Id & i)
     reschedule();
 }
 
+void Thread::reschedule_handler(const IC::Interrupt_Id & i)
+{
+	lock();
+
+ 	reschedule();
+}
+
+//Novembro Azul
+void Thread::cutucao(Thread * needy)
+{
+	IC::ipi_send(needy->queue(), IC::INT_RESCHEDULER);
+	unlock();
+}
 
 void Thread::dispatch(Thread * prev, Thread * next, bool charge)
 {
@@ -334,11 +365,18 @@ void Thread::dispatch(Thread * prev, Thread * next, bool charge)
         db<Thread>(INF) << "prev={" << prev << ",ctx=" << *prev->_context << "}" << endl;
         db<Thread>(INF) << "next={" << next << ",ctx=" << *next->_context << "}" << endl;
 
-		spin.release();
+        if(smp)
+            _lock.release(); // Note that releasing the lock here, even with interrupts disabled, allows for another CPU to select "prev".
+                             // The analysis of whether it could get scheduled by another CPU while its context is being saved by CPU::switch_context()
+                             // must focus on the time it takes to save a context and to reschedule a thread. If this gets stringent for a given architecture,
+                             // then unlocking must be moved into the mediator. For x86 and ARM it doesn't seam to be the case.
+
         CPU::switch_context(&prev->_context, next->_context);
     } else
-    	unlock();
+        if(smp)
+            _lock.release();
 
+    CPU::int_enable();
 }
 
 
@@ -360,7 +398,6 @@ int Thread::idle()
         db<Thread>(WRN) << "TREMBLE OVER OF THE IDLE POWER" << endl;
         db<Thread>(WRN) << "Just kiddin" << endl;
         db<Thread>(WRN) << "The last thread has exited!" << endl;
-
         if(reboot) {
             db<Thread>(WRN) << "Rebooting the machine ..." << endl;
             Machine::reboot();
diff --git a/src/abstraction/thread_init.cc b/src/abstraction/thread_init.cc
index 612125c..aebee83 100644
--- a/src/abstraction/thread_init.cc
+++ b/src/abstraction/thread_init.cc
@@ -16,6 +16,12 @@ void Thread::init()
     // neither by IDLE (which has a lower priority)
     if(Criterion::timed)
         _timer = new (SYSTEM) Scheduler_Timer(QUANTUM, time_slicer);
+
+    IC::int_vector(IC::INT_RESCHEDULER, reschedule_handler);
+    IC::enable(IC::INT_RESCHEDULER);
+
+    IC::int_vector(IC::INT_SUSPEND, suspend_handler);
+    IC::enable(IC::INT_SUSPEND);
 }
 
 __END_SYS
diff --git a/src/init/init_first.cc b/src/init/init_first.cc
index 4d7c3a5..d3d215a 100644
--- a/src/init/init_first.cc
+++ b/src/init/init_first.cc
@@ -23,7 +23,6 @@ public:
             CPU::int_enable();
             return;
         }
-        PC_Timer::disable();
         Machine::smp_barrier();
 
         Thread * first;
@@ -38,7 +37,7 @@ public:
 			// Idle thread creation must succeed main, thus avoiding implicit rescheduling
 			new (SYSTEM) Thread(Thread::Configuration(Thread::READY, Thread::IDLE), &Thread::idle);
         }else{
-        	first = new (SYSTEM) Thread(Thread::Configuration(Thread::READY, Thread::IDLE), &Thread::idle);
+        	first = new (SYSTEM) Thread(Thread::Configuration(Thread::RUNNING, Thread::IDLE), &Thread::idle);
         }
         db<Init>(INF) << "done!" << endl;
 
@@ -50,8 +49,6 @@ public:
         This_Thread::not_booting();
 
         Machine::smp_barrier();
-        Thread::_timer->reset();
-        PC_Timer::enable();
 
         first->_context->load();
     }
diff --git a/src/init/init_system.cc b/src/init/init_system.cc
index 017285f..14856ae 100644
--- a/src/init/init_system.cc
+++ b/src/init/init_system.cc
@@ -19,6 +19,7 @@ public:
         db<Init>(TRC) << "Init_System()" << endl;
 
 		if(Machine::cpu_id() == 0){
+			CPU::int_disable();
 
 			// Initialize the processor
 			db<Init>(INF) << "Initializing the CPU: " << endl;
diff --git a/src/machine/pc/ic_init.cc b/src/machine/pc/ic_init.cc
index fda03f9..c677b04 100644
--- a/src/machine/pc/ic_init.cc
+++ b/src/machine/pc/ic_init.cc
@@ -9,7 +9,7 @@ void PC_IC::init()
 {
     db<Init, IC>(TRC) << "IC::init()" << endl;
 
-    CPU::int_disable();
+    //CPU::int_disable();
 
     // Set all IDT entries to proper int_dispatch() offsets
     CPU::IDT_Entry * idt = reinterpret_cast<CPU::IDT_Entry *>(Memory_Map<PC>::IDT);
@@ -32,7 +32,7 @@ void PC_IC::init()
     remap();
     disable();
 
-    CPU::int_enable();
+    //CPU::int_enable();
 }
 
 __END_SYS
diff --git a/src/machine/pc/pci_init.cc b/src/machine/pc/pci_init.cc
index 468f436..edbc2dc 100644
--- a/src/machine/pc/pci_init.cc
+++ b/src/machine/pc/pci_init.cc
@@ -11,7 +11,7 @@ void PC_PCI::init()
 
     db<Init, PCI>(TRC) << "PCI::init(pmm.io_mem=" << _phy_io_mem << ")" << endl;
 
-    CPU::int_disable();
+    //CPU::int_disable();
 
     CPU::out8(0xcfb, 0x01);
     Reg32 tmp = CPU::in32(CONFADDR);
@@ -21,7 +21,7 @@ void PC_PCI::init()
     }
     CPU::out32(CONFADDR, tmp);
 
-    CPU::int_enable();
+    //CPU::int_enable();
 }
 
 __END_SYS
diff --git a/src/machine/pc/timer_init.cc b/src/machine/pc/timer_init.cc
index 8aecfaf..b7c6eab 100644
--- a/src/machine/pc/timer_init.cc
+++ b/src/machine/pc/timer_init.cc
@@ -9,14 +9,14 @@ void PC_Timer::init()
 {
     db<Init, Timer>(TRC) << "Timer::init()" << endl;
 
-    CPU::int_disable();
+    //CPU::int_disable();
     
     Engine::config(0, Engine::clock() / FREQUENCY);
 
     IC::int_vector(IC::INT_TIMER, int_handler);
     IC::enable(IC::INT_TIMER);
 
-    CPU::int_enable();
+    //CPU::int_enable();
 }
 
 __END_SYS
